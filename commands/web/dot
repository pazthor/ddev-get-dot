#ddev-generated
#!/bin/bash
set -eo pipefail

## #ddev-generated
## Description: executes a script from tools/scripts/laravel
## Usage: dot  [context] [script] [args…]
## Example: ddev dot laravel migrate
## ExecRaw: true
## HostWorkingDir: true
## TODO move to web but investigate how to install dependencies(fzf docspar)


command -v fzf >/dev/null 2>&1 || { echo "❌ Install fzf" >&2; exit 1; }
readonly SCRIPT_DIR="/var/www/html/tools/scripts"
[[ -d "$SCRIPT_DIR" ]] || { echo "❌ $SCRIPT_DIR not found" >&2; exit 1; }

# 1) full non-interactive: context + script
if [[ $# -ge 2 ]]; then
  ctx="$1"; script="$2"; shift 2
  target="$SCRIPT_DIR/$ctx/$script"
  [[ -d "$SCRIPT_DIR/$ctx" ]] || { echo "❌ Context '$ctx' not found." >&2; exit 2; }
  [[ -x "$target" ]]          || { echo "❌ '$script' not executable." >&2; exit 3; }
  exec "$target" "$@"
fi

# 2) context-only: pick script within a given context
if [[ $# -eq 1 ]]; then
  ctx="$1"
  [[ -d "$SCRIPT_DIR/$ctx" ]] || { echo "❌ Context '$ctx' not found." >&2; exit 2; }
  script=$(find "$SCRIPT_DIR/$ctx" -type f -printf '%f\n' \
             | fzf \
                 --preview="cat $SCRIPT_DIR/$ctx/{}" \
                 --prompt="Script in $ctx> ") \
    || exit
  exec "$SCRIPT_DIR/$ctx/$script"
fi

# 3) no args: pick context then pick script
ctx=$(find "$SCRIPT_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' \
      | fzf --prompt="Context> ") || exit
script=$(find "$SCRIPT_DIR/$ctx" -type f -printf '%f\n' \
         | fzf \
             --preview="cat $SCRIPT_DIR/$ctx/{}" \
             --prompt="Script in $ctx> ") \
  || exit
exec "$SCRIPT_DIR/$ctx/$script"