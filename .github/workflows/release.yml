name: release

on:
  workflow_run:
    workflows: ["tests"]
    branches: [ main ]
    types: 
      - completed

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      !contains(github.event.workflow_run.head_commit.message, '[skip release]')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from commit
        id: version
        run: |
          # Extract version from commit message if present (e.g., "v1.2.3" or "1.2.3")
          VERSION=$(echo "${{ github.event.workflow_run.head_commit.message }}" | grep -oE 'v?[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          
          if [ -z "$VERSION" ]; then
            # If no version in commit message, generate one based on date
            VERSION="v$(date +%Y.%m.%d)-$(echo ${{ github.event.workflow_run.head_sha }} | cut -c1-7)"
          fi
          
          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version will be: $VERSION"

      - name: Check if tag exists
        id: tag_check
        run: |
          if git tag | grep -q "^${{ steps.version.outputs.version }}$"; then
            echo "Tag ${{ steps.version.outputs.version }} already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes
            ${{ github.event.workflow_run.head_commit.message }}
            
            ## Installation
            ```bash
            ddev get pazthor/ddev-get-dot
            ```
            
            ## What's included
            - `ddev dot` command for interactive script execution
            - Automatic fzf installation for fuzzy finding
            - Support for organized script directories
            
            **Tests Status**: ✅ All tests passed
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.workflow_run.head_commit.id }}...${{ github.event.workflow_run.head_sha }}
          draft: false
          prerelease: false

      - name: Output result
        run: |
          if [ "${{ steps.tag_check.outputs.exists }}" == "true" ]; then
            echo "✅ Skipped: Tag ${{ steps.version.outputs.version }} already exists"
          else
            echo "✅ Created: Release ${{ steps.version.outputs.version }} (Tests passed)"
          fi
